# -*- coding: utf-8 -*-
"""ulyanov_hangman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVBO08H0DEfZV5_UxiAomUe5DIHLTDJO
"""

words = '''Ability
Access
Accident
Account
Act
Action
Activity
Actor
Ad
Addition
Address
Administration
Advantage
Advertising
Advice
Affair
Age
Agency
Agreement
Air
Airport
Alcohol
Ambition
Amount
Analysis
Analyst
Animal
Answer
Anxiety
Apartment
Appearance
Apple
Application
Appointment
Area
Argument
Army
Arrival
Art
Article
Aspect
Assignment
Assistance
Assistant
Association
Assumption
Atmosphere
Attempt
Attention
Attitude
Audience
Aunt
Average
Awareness
Back
Bad
Balance
Ball
Bank
Baseball
Basis
Basket
Bath
Bathroom
Bedroom
Beer
Beginning
Benefit
Bird
Birth
Birthday
Bit
Blood
Board
Boat
Body
Bonus
Book
Boss
Bottom
Box
Boy
Boyfriend
Bread
Breath
Brother
Building
Bus
Business
Buyer
Cabinet
Camera
Cancer
Candidate
Capital
Car
Card
Care
Career
Case
Cash
Cat
Category
Cause
Celebration
Cell
Championship
Chance
Chapter
Charity
Cheek
Chemistry
Chest
Chicken
Child
Childhood
Chocolate
Choice
Church
Cigarette
City
Class
Classroom
Client
Climate
Clothes
Coast
Coffee
Collection
College
Combination
Committee
Communication
Community
Company
Comparison
Competition
Complaint
Computer
Concept
Conclusion
Condition
Confusion
Connection
Consequence
Construction
Contact
Context
Debt
Decision
Definition
Delivery
Demand
Department
Departure
Depression
Depth
Description
Design
Desk
Development
Device
Diamond
Difference
Difficulty
Dinner
Direction
Director
Dirt
Disaster
Discipline
Discussion
Disease
Elevator
Emotion
Emphasis
Employee
Employer
Employment
End
Energy
Engine
Entertainment
Enthusiasm
Entry
Environment
Equipment
Error
Establishment
Estate
Event
Exam
Ex
Film
Finding
Fire
Fish
Flight
Focus
Food
Football
Force
Form
Fortune
Foundation
Frame
Freedom
Friendship
Fun
Funeral
Future
Game
Garbage
Garden
Gate
Gene
Gift
Girl
Girlfriend
Goal
Government
Historian
History
Home
Homework
Honey
Hope
Hospital
Hotel
House
Housing
Ice
Idea
Image
Imagination
Impact
Importance
Impression
Improvement
Income
Independence
Indication
Industry
Inflation
Information
Initiative
Injury
Insect
Inside
Inspection
Inspector
Instance
Instruction
Insurance
Intention
Interaction
Interest
Internet
Introduction
Investment
Issue
Item
Jacket
Jam
Jazz
Job
Joker
Judgment
Juice
Key
Kingdom
Knife
Knowledge
Lab
Ladder
Lady
Lake
Language
Law
Leader
Leadership
Length
Level
Library
Life
Light
Line
Link
List
Literature
Location
Loss
Love
Machine
Magazine
Maintenance
Mall
Man
Management
Manager
Manufacturer
Map
Market
Marketing
Marriage
Material
Math
Matter
Meal
Meaning
Measurement
Meat
Media
Medicine
Medium
Member
Membership
Memory
Menu
Message
Metal
Method
Midnight
Mind
Mixture
Mode
Model
Mom
Moment
Money
Month
Mood
Morning
Mouse
Movie
Mud
Music
Name
Nation
Nature
Negotiation
Network
News
Newspaper
Night
Note
Nothing
Number
Object
Obligation
Office
Oil
Operation
Opinion
Opportunity
Orange
Order
Organization
Outcome
Outside
Oven
Owner
Page
Paint
Painting
Paper
Part
Passenger
Passion
Patience
Payment
Penalty
People
Percentage
Perception
Performance
Period
Permission
Person
Personality
Perspective
Philosophy
Phone
Photo
Physics
Piano
Picture
Pie
Piece
Pizza
Place
Plan
Platform
Player
Poem
Poet
Poetry
Point
Police
Policy
Politics
Pollution
Population
Position
Possession
Possibility
Post
Pottery
Potato
Power
Practice
Preference
Preparation
Presence
Presentation
President
Pressure
Price
Priority
Problem
Procedure
Process
Product
Profession
Professor
Profit
Program
Promotion
Property
Proposal
Protection
Psychology
Purpose
Quality
Quantity
Queen
Question
Radio
Range
Rate
Ratio
Reaction
Reality
Reason
Reception
Recipe
Recognition
Recommendation
Record
Recording
Reflection
Refrigerator
Region
Relation
Relationship
Replacement
Republic
Reputation
Requirement
Research
Resolution
Resource
Response
Responsibility
Restaurant
Result
Revenue
Review
Revolution
Risk
River
Road
Rock
Role
Room
Rule
Safety
Salad
Salt
Sample
Satisfaction
Scale
Scene
School
Science
Screen
Secretary
Section
Sector
Security
Selection
Sense
Series
Service
Session
Setting
Shape
Share
Shirt
Side
Sign
Signature
Significance
Singer
Sir
Sister
Site
Situation
Size
Skill
Society
Software
Soil
Solution
Son
Song
Sound
Soup
Source
Space
Speaker
Speech
Sport
Square
Standard
Star
State
Statement
Steak
Step
Stock
Storage
Store
Story
Stranger
Strategy
Stress
Structure
Student
Studio
Study
Style
Subject
Success
Suggestion
Sun
Supermarket
Surgery
Sympathy
System
Table
Tale
Task
Tax
Tea
Teacher
Technology
Television
Temperature
Tennis
Tension
Term
Test
Thanks
Theory
Thing
Thought
Throat
Time
Tongue
Tool
Tooth
Top
Topic
Town
Trade
Tradition
Trainer
Training
Transportation
Truth
Type
Uncle
Understanding
Union
Unit
University
User
Value
Variation
Variety
Vehicle
Version
Video
View
Village
Virus
Voice
Void
Volume
War
Warning
Water
Way
Weakness
Wealth
Weather
Web
Wedding
Week
Wife
Wind
Winner
Woman
Wood
Word
Work
Worker
World
Writer
Writing
Year
Youth
Zebra
Zero
Zinc
Zodiac
Zoo'''

words = words.split('\n'); words

import random

def get_word():
    word = random.choice(words)
    return word.upper()

def play(word):
    word_completion = '_' * len(word)
    guessed = False
    guessed_letters = []
    guessed_words = []
    tries = 8
    print("let's play hangman!")
    print(display_hangman(tries))
    print(' '.join(word_completion))
    print("\n")
    while not guessed and tries > 0:
        guess = input("буква или слово: ").upper()
        if len(guess) == 1 and guess.isalpha():
            if guess in guessed_letters:
                print("уже угадано", guess)
            elif guess not in word:
                print(guess, "нет такой")
                tries -= 1
                guessed_letters.append(guess)
            else:
                print(guess, "есть")
                guessed_letters.append(guess)
                word_as_list = list(word_completion)
                indices = [i for i, letter in enumerate(word) if letter == guess]
                for index in indices:
                    word_as_list[index] = guess
                word_completion = word_as_list
                if "_" not in word_completion:
                    guessed = True
        elif len(guess) == len(word) and guess.isalpha():
            if guess in guessed_words:
                print("уже угадано", guess)
            elif guess != word:
                print(guess, "нет такой")
                tries -= 1
                guessed_words.append(guess)
            else:
                guessed = True
                word_completion = word
        else:
            print("чувак...")
        print(display_hangman(tries))
        print(' '.join(word_completion))
    if guessed:
        print("угадали")
    else:
        print(f"вы проиграли. Это было {word}.")

# отрисовка
def display_hangman(tries):
    stages = ["""
                   --------
                   |      |
                   |      0
                   |     /|\\
                   |      |
                   |     / \\
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |     \|/
                   |      |
                   |     / 
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |     \|/
                   |      |
                   |      
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |     \|
                   |      |
                   |     
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |      |
                   |      
                   |     
                   -
                """,
                """
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                """,
                """
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                """,
              """
                   --------
                   |
                   |  
                   |
                   | 
                   |
                   -
              """
    ]
    return stages[tries]

def hangman():
    word = get_word()
    play(word)
    while input("еще? (yes/no)").lower() == "yes":
        word = get_word()
        play(word)

hangman()